@page "/Book/Add"
@rendermode InteractiveServer
@using LibraryManagementBackend.Objects
@inject IRepository<Book> BookData;
@inject NavigationManager Navigation;

<h1>Create</h1>
<h4>Book</h4>

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Name" class="control-label">Title</label>
                <input for="Name" class="form-control" @bind="@book.Title" />
            </div>
            <div class="form-group">
                <label asp-for="Author" class="control-label">Author</label>
                <input for="Author" class="form-control" @bind="@book.Author" />
            </div>
            <div class="form-group">
                <label asp-for="ISBN" class="control-label">ISBN</label>
                <input asp-for="ISBN" class="form-control" @bind="book.ISBN" />
            </div>
            <div class="form-group">
                <label asp-for="Availibility" class="control-label">Availibility</label>
                <select @bind="@BookAvalibility">
                    @foreach (var value in Enum.GetValues<Availability>())
                    {
                        <option value="@value">@value.GetEnumDescription()</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-default" @onclick="@(async () => await AddBook())">Save</button>
                <button class="btn" @onclick="@cancel">Cancel</button>
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter]
    public Book book { get; set; } = new Book();
    [Parameter]
    public Availability BookAvalibility { get; set; }


    protected async Task AddBook()
    {
        book.Availibility = BookAvalibility;
        BookData.Add(book);
        Navigation.NavigateTo("/Book/all", true);
    }

    void cancel()
    {
        Navigation.NavigateTo("/Book/all", true);
    }
}