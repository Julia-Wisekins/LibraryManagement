@page "/reader/{ReaderId}/Borrow"
@rendermode InteractiveServer
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using LibraryManagementBackend.Objects
@inject IRepository<Book> BookData;
@inject IRepository<Reader> ReaderData;
@inject NavigationManager navigation;

@if (Books == null)
{
    <p><em>@dataSatus</em></p>
}
<div class="form-group">
    <input class="form-control" type="text" placeholder="Search..."
           @bind="Filter"
           @onkeydown="FilterBooks"
           @bind:event="oninput">
</div>

<table class="table table-striped">
    <thead class="thead-light">
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>ISBN</th>
            <th>Availibility</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.ISBN</td>
                <td>@Extensions.GetEnumDescription((Availability)book.Availibility)</td>
                <td>
                    <input type="submit" value="Borrow Book" @onclick="@(async () => Borrow(book.Id))" class="btn btn-default" />
                </td> 
            </tr>
        }
    </tbody>
</table>



@code {

    [Parameter]
    public string ReaderId { get; set; }
    [Parameter]
    public IEnumerable<Book> Books { get; set; } = [];
    [Parameter]
    public IEnumerable<Reader> Reader { get; set; } = [];
    public List<string> ToolbarItems = new List<string>() { "Search" };
    public string Filter { get; set; }

    private static string loading = "Loading...";
    private static string notFound = "Books Not Found";


    private string dataSatus = loading;



    protected override async void OnInitialized()
    {

        var res = await BookData.GetAll();

        Books = res.Where(b => b.Availibility == Availability.Available);
        dataSatus = Books == null || Books.Count() < 1 ? notFound : string.Empty;
    }
    private async void FilterBooks(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Books = [];
            dataSatus = loading;
            var res = await BookData.Search(Filter);
            Books = res.Where(b => b.Availibility == Availability.Available);
        }
    }
    private async void Borrow(int bookId)
    {
        Book book = (await BookData.GetById(bookId)).FirstOrDefault();
        Reader reader = (await ReaderData.GetById(int.Parse(ReaderId))).FirstOrDefault();
        if (book != null
        && reader != null)
        {
            reader.BorrowedBooks = reader.BorrowedBooks.Union(new[] { book });
            ReaderData.Update(reader);
        }
    }
}